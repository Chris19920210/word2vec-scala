{"name":"word2vec-scala","tagline":"Scala port of the word2vec toolkit.","body":"word2vec-scala\r\n==============\r\n\r\n\r\nThis is a Scala implementation of the [word2vec](https://code.google.com/p/word2vec/)\r\ntoolkit's model representation.\r\n\r\nThis Scala interface allows the user to access the vector representation output\r\nby the word2vec toolkit. It also implements example operations that can be done\r\non the vectors (e.g., word-distance, word-analogy).\r\n\r\nNote that it does **NOT** implement the actual training algorithms.  You will\r\nstill need to download and compile the original word2vec tool if you wish to\r\ntrain new models.\r\n\r\n\r\n## Includes\r\n\r\nThe included model (vectors.bin) was trained on the\r\n[text8](http://mattmahoney.net/dc/text8.zip) corpus, which contains\r\nthe first 100 MB of the \"clean\" English Wikipedia corpus.  The following\r\ntraining parameters were used:\r\n\r\n```bash\r\n./word2vec -train text8 -output vectors.bin -cbow 0 -size 200 -window 5 -negative 0 -hs 1 -sample 1e-3 -threads 12 -binary 1\r\n```\r\n\r\n\r\n## Usage\r\n\r\n#### Load model\r\n```scala\r\nval model = new Word2Vec()\r\nmodel.load(\"vectors.bin\")\r\n```\r\n\r\n#### Distance - Find N best matches\r\n```scala\r\nval results = model.distance(List(\"france\"), N = 10)\r\nmodel.pprint(results)\r\n```\r\n```\r\n                                              Word       Cosine distance\r\n------------------------------------------------------------------------\r\n                                           belgium              0.706633\r\n                                             spain              0.672767\r\n                                       netherlands              0.668178\r\n                                             italy              0.616545\r\n                                       switzerland              0.595572\r\n                                        luxembourg              0.591839\r\n                                          portugal              0.564891\r\n                                           germany              0.549196\r\n                                            russia              0.543569\r\n                                           hungary              0.519036\r\n```\r\n\r\n```scala\r\nmodel.pprint( model.distance(List(\"france\", \"usa\")) )\r\n```\r\n```\r\n                                              Word       Cosine distance\r\n------------------------------------------------------------------------\r\n                                       netherlands              0.691459\r\n                                       switzerland              0.672526\r\n                                           belgium              0.656425\r\n                                            canada              0.641793\r\n                                            russia              0.612469\r\n                                                 .              .\r\n                                                 .              .\r\n                                                 .              .\r\n                                           croatia              0.451900\r\n                                            vantaa              0.450767\r\n                                            roissy              0.448256\r\n                                            norway              0.447392\r\n                                              cuba              0.446168\r\n```\r\n\r\n```scala\r\nmodel.pprint( model.distance(List(\"france\", \"usa\", \"usa\")) )\r\n```\r\n```\r\n                                              Word       Cosine distance\r\n------------------------------------------------------------------------\r\n                                            canada              0.631119\r\n                                       switzerland              0.626366\r\n                                       netherlands              0.621275\r\n                                            russia              0.569951\r\n                                           belgium              0.560368\r\n                                                 .              .\r\n                                                 .              .\r\n                                                 .              .\r\n                                             osaka              0.418143\r\n                                               eas              0.417097\r\n                                           antholz              0.415458\r\n                                           fukuoka              0.414105\r\n                                           zealand              0.413075\r\n```\r\n\r\n#### Analogy - King is to Queen, as Man is to ???\r\n```scala\r\nmodel.pprint( model.analogy(\"king\", \"queen\", \"man\", N = 10) )\r\n```\r\n```\r\n                                              Word       Cosine distance\r\n------------------------------------------------------------------------\r\n                                             woman              0.547376\r\n                                              girl              0.509787\r\n                                              baby              0.473137\r\n                                            spider              0.450589\r\n                                              love              0.433065\r\n                                        prostitute              0.433034\r\n                                             loves              0.422127\r\n                                            beauty              0.421060\r\n                                             bride              0.413417\r\n                                              lady              0.406856\r\n```\r\n\r\n#### Ranking - Rank a set of words by their respective distance to search term\r\n```scala\r\nmodel.pprint( model.rank(\"apple\", Set(\"orange\", \"soda\", \"lettuce\")) )\r\n```\r\n```\r\n                                              Word       Cosine distance\r\n------------------------------------------------------------------------\r\n                                            orange              0.203808\r\n                                           lettuce              0.132007\r\n                                              soda              0.075649\r\n```\r\n\r\n\r\n## Compatibility\r\n\r\n- **[09/2013]** The code was tested to work with models trained using revision\r\n[r33](http://word2vec.googlecode.com/svn/trunk/?p=33) of the word2vec toolkit.\r\nIt should also work with future revisions, assuming that the output format does\r\nnot change.\r\n\r\n\r\n<a target=\"_blank\" title=\"Google+\" href=\"https://plus.google.com/109154443717173369460?rel=author\"/>","google":"UA-48101157-1","note":"Don't delete this file! It's used internally to help with page regeneration."}